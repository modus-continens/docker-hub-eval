ubuntu(version) :- ubuntu(version, "amd64").

no_oci("trusty").
no_oci("xenial").
has_oci(v) :- !no_oci(v).

ubuntu(version, arch) :-
  ubuntu_version(version, arch),
  has_oci(version),
  thisTarBase=f"ubuntu-${version}-oci-${arch}-root",
  thisTar=f"${thisTarBase}.tar.gz",
  baseUrl=f"https://partner-images.canonical.com/oci/${version}/current",
  (
    from("scratch"),
    download_tar(thisTarBase, thisTar, baseUrl)
      ::copy(thisTarBase, "/")
  )::set_entrypoint("/bin/bash").

ubuntu(version, arch) :-
  ubuntu_version(version, arch),
  no_oci(version),
  thisTarBase = f"ubuntu-${version}-core-cloudimg-${arch}",
  thisTar=f"${thisTarBase}-root.tar.gz",
  baseUrl=f"https://partner-images.canonical.com/core/${version}/current",
  (
    from("scratch"),
    download_tar(thisTarBase, thisTar, baseUrl)
      ::copy(thisTarBase, "/"),

    # a few minor docker-specific tweaks
    # see https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap
    (
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L40-L48
      run("
        echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
        && echo 'exit 101' >> /usr/sbin/policy-rc.d \
        && chmod +x /usr/sbin/policy-rc.d \
      "),
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L54-L56
      run("
        dpkg-divert --local --rename --add /sbin/initctl \
        && cp -a /usr/sbin/policy-rc.d /sbin/initctl \
        && sed -i 's/^exit.*/exit 0/' /sbin/initctl \
      "),
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L71-L78
      run("echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup"),
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L85-L105
      run("
        echo 'DPkg::Post-Invoke { \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; };' > /etc/apt/apt.conf.d/docker-clean \
        && echo 'APT::Update::Post-Invoke { \"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\"; };' >> /etc/apt/apt.conf.d/docker-clean \
        && echo 'Dir::Cache::pkgcache \"\"; Dir::Cache::srcpkgcache \"\";' >> /etc/apt/apt.conf.d/docker-clean \
      "),
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L109-L115
      run("echo 'Acquire::Languages \"none\";' > /etc/apt/apt.conf.d/docker-no-languages"),
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L118-L130
      run("echo 'Acquire::GzipIndexes \"true\"; Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/docker-gzip-indexes"),
      # https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L134-L151
      run("echo 'Apt::AutoRemove::SuggestsImportant \"false\";' > /etc/apt/apt.conf.d/docker-autoremove-suggests"),
      (
        version = "xenial",
        # delete all the apt list files since they're big and get stale quickly
        run("rm -rf /var/lib/apt/lists/*")
        # this forces "apt-get update" in dependent images, which is also good
        # (see also https://bugs.launchpad.net/cloud-images/+bug/1699913)
        ;
        version != "xenial",
        # verify that the APT lists files do not exist
        run("[ -z \"$(apt-get indextargets)\" ]")
        # (see https://bugs.launchpad.net/cloud-images/+bug/1699913)
      ),
      run("mkdir -p /run/systemd && echo 'docker' > /run/systemd/container")
      # make systemd-detect-virt return "docker"
      # See: https://github.com/systemd/systemd/blob/aa0c34279ee40bce2f9681b496922dedbadfca19/src/basic/virt.c#L434
    )::merge
  )::set_entrypoint("/bin/bash").

download_tar(thisTarBase, thisTar, baseUrl) :-
  from("alpine")::set_workdir("/tmp"),
  run("apk add wget bash && cp /bin/bash /bin/sh"),
  run(f"wget -qN ${baseUrl}/{SHA256SUMS{,.gpg},${thisTarBase}.manifest,'unpacked/build-info.txt'} && \
				wget -N --progress=dot:giga ${baseUrl}/${thisTar}"),
  run(f"mkdir ${thisTarBase} && tar -xzf ${thisTar} -C ${thisTarBase}").
