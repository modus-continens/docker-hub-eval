redis(version, variant) :-
  redis_version(version, variant, download_url, sha_type, sha),
  variant != "alpine",
  (
    (
      from("debian:bullseye-slim")
        ::set_env("GOSU_VERSION", "1.14"),
      # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
      run("groupadd -r -g 999 redis && useradd -r -g redis -u 999 redis"),
      # grab gosu for easy step-down from root
      # https://github.com/tianon/gosu/releases
      run("set -eux;
            savedAptMark=\"$(apt-mark showmanual)\";
            apt-get update;
            apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget;
            rm -rf /var/lib/apt/lists/*;
            dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\";
            wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\";
            wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\";
            export GNUPGHOME=\"$(mktemp -d)\";
            gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;
            gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;
            gpgconf --kill all;
            rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc;
            apt-mark auto '.*' > /dev/null;
            [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null;
            apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;
            chmod +x /usr/local/bin/gosu;
            gosu --version;
            gosu nobody true")
    )::set_env("REDIS_VERSION", version)
     ::set_env("REDIS_DOWNLOAD_URL", download_url)
     ::set_env("REDIS_DOWNLOAD_SHA", sha),
    (
      config(version, variant, make_target, build_tls),
      apt_dep(variant, build_tls, libc6, libssl),
      run(f"set -eux;

          apt-mark showmanual > /_saved_apt_mark;
          apt-get update;
          apt-get install -y --no-install-recommends \
            ca-certificates \
            wget \
            \
            dpkg-dev \
            gcc \
            ${libc6} \
            ${libssl} \
            make \
          ;
          rm -rf /var/lib/apt/lists/*"),
      extract_redis(sha_type),
      protected_mode_sed(version),
      patch_and_build(make_target, build_tls),
      run("set -eux;
            savedAptMark=\"$(cat /_saved_apt_mark)\"; rm /_saved_apt_mark;
            apt-mark auto '.*' > /dev/null;
            [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null;
            find /usr/local -type f -executable -exec ldd '{}' ';' \
              | awk '/=>/ { print $(NF-1) }' \
              | sort -u \
              | xargs -r dpkg-query --search \
              | cut -d: -f1 \
              | sort -u \
              | xargs -r apt-mark manual \
            ; \
            apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;

            redis-cli --version;
            redis-server --version")
    )::merge,
    run("mkdir /data && chown redis:redis /data"),
    copy("docker-entrypoint.sh", "/usr/local/bin/"),
    run("chmod a+rx /usr/local/bin/docker-entrypoint.sh")
  )::set_workdir("/data")
   ::set_entrypoint("docker-entrypoint.sh").

redis(version, "alpine") :-
  redis_version(version, "alpine", download_url, sha_type, sha),
  (
      from("alpine:3.15")
      ::set_env("REDIS_VERSION", version)
      ::set_env("REDIS_DOWNLOAD_URL", download_url)
      ::set_env("REDIS_DOWNLOAD_SHA", sha),
    # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
    run("addgroup -S -g 1000 redis && adduser -S -G redis -u 999 redis"),
    # alpine already has a gid 999, so we'll use the next id

    # grab su-exec for easy step-down from root
    # add tzdata for https://github.com/docker-library/redis/issues/138
    run("apk add --no-cache 'su-exec>=0.2' tzdata"),
    config(version, "alpine", make_target, build_tls),
    (
      # install real "wget" to avoid:
      #   + wget -O redis.tar.gz https://download.redis.io/releases/redis-6.0.6.tar.gz
      #   Connecting to download.redis.io (45.60.121.1:80)
      #   wget: bad header line:     XxhODalH: btu; path=/; Max-Age=900
      run(f"set -eux;
          apk add --no-cache --virtual .build-deps \
            coreutils \
            dpkg-dev dpkg \
            gcc \
            linux-headers \
            make \
            musl-dev \
            openssl-dev"),

      extract_redis(sha_type),
      protected_mode_sed(version),
      patch_and_build(make_target, build_tls),
      run("set -eux;
            runDeps=\"$( \
            scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
              | tr ',' '\n' \
              | sort -u \
              | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \
          )\";
          apk add --no-network --virtual .redis-rundeps $runDeps;
          apk del --no-network .build-deps;

          redis-cli --version;
          redis-server --version")
    )::merge,
    run("mkdir /data && chown redis:redis /data"),
    copy("docker-entrypoint.sh", "/usr/local/bin/")
  )::set_workdir("/data")
   ::set_entrypoint("docker-entrypoint.sh").

# version, variant, make_target, build_tls
# TLS support was added in 6.0, and we can't link 32bit Redis against 64bit OpenSSL (and it isn't worth going to a full foreign architecture -- just use i386/redis instead)
supports_tls(v) :- v = f"6.${_}", v = f"7.${_}".
config(version, "32bit", "32bit", "no").
config(version, non_32bit, "all", build_tls) :-
  non_32bit != "32bit",
  (
    supports_tls(version), build_tls = "yes";
    !supports_tls(version), build_tls = "no"
  ).

# variant, build_tls, libc6, libssl
apt_dep("32bit", "no", "libc6-dev-i386 gcc-multilib", "").
apt_dep(variant, "no", "libc6-dev", "") :- variant != "32bit".
apt_dep(variant, "yes", "libc6-dev", "libssl-dev") :- variant != "32bit".


# disable Redis protected mode [1] as it is unnecessary in context of Docker
# (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)
# [1]: https://github.com/redis/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da
protected_mode_sed(version) :-
  # version != f"5.${_}",
  !string_concat("5.", _, version),
  run("grep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *1 *,.*[)],$' /usr/src/redis/src/config.c && \
      sed -ri 's!^( *createBoolConfig[(]\"protected-mode\",.*, *)1( *,.*[)],)$!\\10\\2!' /usr/src/redis/src/config.c && \
      grep -E '^ *createBoolConfig[(]\"protected-mode\",.*, *0 *,.*[)],$' /usr/src/redis/src/config.c").
protected_mode_sed(version) :-
  version = f"5.${_}",
  run("grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h && \
      sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h && \
      grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h").
# for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently "if you specify any argument to redis-server, [it assumes] you are going to specify everything"
# see also https://github.com/docker-library/redis/issues/4#issuecomment-50780840
# (more exactly, this makes sure the default behavior of "save on SIGTERM" stays functional by default)

extract_redis(sha_type) :-
  run(f"wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\" && \
        echo \"$REDIS_DOWNLOAD_SHA *redis.tar.gz\" | ${sha_type}sum -c - && \
        mkdir -p /usr/src/redis && \
        tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 && \
        rm redis.tar.gz;").

patch_and_build(make_target, build_tls) :-
  # https://github.com/jemalloc/jemalloc/issues/467 -- we need to patch the "./configure" for the bundled jemalloc to match how Debian compiles, for compatibility
  # (also, we do cross-builds, so we need to embed the appropriate "--build=xxx" values to that "./configure" invocation)
  run("set -eux;
        gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\";
        extraJemallocConfigureFlags=\"--build=$gnuArch\";
        # https://salsa.debian.org/debian/jemalloc/-/blob/c0a88c37a551be7d12e4863435365c9a6a51525f/debian/rules#L8-23
        dpkgArch=\"$(dpkg --print-architecture)\";
        case \"${dpkgArch##*-}\" in
          amd64 | i386 | x32) extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-page=12\" ;;
          *) extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-page=16\" ;;
        esac;
        extraJemallocConfigureFlags=\"$extraJemallocConfigureFlags --with-lg-hugepage=21\";
        grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile;
        sed -ri 's!cd jemalloc && ./configure !&'\"$extraJemallocConfigureFlags\"' !' /usr/src/redis/deps/Makefile;
        grep -F \"cd jemalloc && ./configure $extraJemallocConfigureFlags \" /usr/src/redis/deps/Makefile;"),
  run(f"make -C /usr/src/redis -j \"$(nproc)\" ${make_target} && \
        make -C /usr/src/redis install")::in_env("BUILD_TLS", build_tls),
  # TODO https://github.com/redis/redis/pull/3494 (deduplicate "redis-server" copies)
  run("set -enx;
        serverMd5=\"$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)\"; export serverMd5;
        find /usr/local/bin/redis* -maxdepth 0 \
          -type f -not -name redis-server \
          -exec sh -eux -c ' \
            md5=\"$(md5sum \"$1\" | cut -d\" \" -f1)\"; \
            test \"$md5\" = \"$serverMd5\"; \
          ' -- '{}' ';' \
          -exec ln -svfT 'redis-server' '{}' ';';

        rm -r /usr/src/redis;").
